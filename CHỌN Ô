#include<iostream>
#include<bitset>
using namespace std;
int n;
int dx[] = {1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0};
int a[4][10005];
int getbit(int n , int k){
    return (n>>(k-1)) & 1;
}
 int cal(int n,int col){
    int sum = 0;
    for(int i = 0 ; i< 4 ; i++){
        if(getbit(n,4-i))sum += a[i][col];
    }
    return sum;
}
int main(){
    ios_base::sync_with_stdio(0); cin.tie(NULL);cout.tie(NULL);
    int t ;
    cin  >> t;
    while(t--){
        cin >> n;
    for(int i =0 ; i< 4 ; i++){
        for(int j = 0 ; j< n ; j++){
            cin >> a[i][j]; 
    }
}
     bool forwardstar[16][16];
    for(int i =0 ;i<16;i++){
        for(int j=0 ; j< 16;j++){
            if(!(i&j))forwardstar[i][j]= forwardstar[j][i] =true;
            else forwardstar[i][j]= forwardstar[j][i] =false;
        }
    }
    int ans = 0;
    int dp[n][16];
    for(int i =0 ; i<16 ;i++){
        if(dx[i])dp[0][i] = cal(i,0);
        else dp[0][i] = -1e9;
    }
    for(int i = 1 ; i< n ; i++){
        for(int j =0 ; j < 16 ; j++){
            dp[i][j] = - 1e9;
            if(!dx[j])continue;
            for(int k = 0;k< 16 ;k++){
                if(!dx[k])continue;
                if(forwardstar[j][k]) dp[i][j] = max(dp[i][j], dp[i-1][k] + cal(j,i));
            }
        }
    }
    for(int i =0 ; i< 16 ; i++)ans = max(ans , dp[n-1][i]);
    cout<<ans<<"\n";
    }
}
